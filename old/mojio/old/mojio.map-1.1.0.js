// Generated by CoffeeScript 1.6.3
(function() {
  var MojioMap,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = MojioMap = (function() {
    function MojioMap(div, client, options) {
      this.receiveEvent = __bind(this.receiveEvent, this);
      this.vehicle = {};
      this.map = null;
      this.follow = null;
      this.settings = null;
      this.client = client;
      this.div = div;
      this.settings = $.extend({
        'template': '#eventTemplate',
        'delay': 800,
        'autoCenter': true,
        'location': {
          lat: 49.278277,
          lng: -123.116977
        }
      }, options);
      google.maps.event.addDomListener(window, 'load', function() {
        var mapOptions;
        mapOptions = {
          center: new google.maps.LatLng(settings.location.lat, settings.location.lng),
          zoom: 12,
          maxZoom: 16,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        this.map = new google.maps.Map(document.getElementById(div), mapOptions);
        return this.client.onEvent(receiveEvent);
      });
    }

    MojioMap.prototype.receiveEvent = function(event) {
      var item;
      if (!_map) {
        return $(function() {
          return receiveEvent(event);
        });
      }
      item = this.vehicles[event.VehicleId];
      if (!item) {
        return;
      }
      if (event.Location && !isNaN(event.Location.Lat) && !isNaN(event.Location.Lng)) {
        setLocation(item, event.Location);
        if (_follow === event.VehicleId) {
          return _map.panTo(item.location);
        } else if (settings.autoCenter) {
          return center();
        } else {
          if (!item.location) {
            return;
          }
          return item.markers[item.markers.length] = new google.maps.Marker({
            position: item.location,
            map: _map,
            title: event.EvenType
          });
        }
      }
    };

    MojioMap.prototype.setLocation = function(vehicle, location) {
      var distance, latLng;
      latLng = new google.maps.LatLng(location.Lat, location.Lng);
      if (vehicle.path.length === 1) {
        distance = google.maps.geometry.spherical.computeDistanceBetween(vehicle.location, latLng);
        if (distance > 500) {
          vehicle.path.clear();
        }
      }
      vehicle.path.push(latLng);
      vehicle.location = latLng;
      if (!vehicle.marker) {
        return vehicle.marker = new google.maps.Marker({
          position: latLng,
          map: _map,
          title: vehicle.data.Name
        });
      } else {
        return vehicle.marker.setPosition(latLng);
      }
    };

    MojioMap.prototype.removeVehicle = function(vehicleId) {
      var i, item, _i, _ref;
      item = _vehicles[vehicleId];
      if (!item) {
        return;
      }
      for (i = _i = 0, _ref = item.markers.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        item.markers[i].setMap(null);
      }
      if (item.marker) {
        item.marker.setMap(null);
      }
      item.poly.setMap(null);
      client.unsubscribe('Vehicle', vehicleId);
      return this.vehicles[vehicleId] = null;
    };

    MojioMap.prototype.clearVehicles = function() {
      var k, _i, _len, _ref, _vehicles;
      _ref = this.vehicles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        removeVehicle(k);
      }
      return _vehicles = {};
    };

    MojioMap.prototype.addVehicle = function(vehicle) {
      var poly, polyOptions;
      if (_vehicles[vehicle._id]) {
        return;
      }
      polyOptions = {
        strokeColor: '#333333',
        strokeOpacity: 0.7,
        strokeWeight: 4
      };
      poly = new google.maps.Polyline(polyOptions);
      poly.setMap(_map);
      this.vehicles[vehicle._id] = {
        poly: poly,
        path: poly.getPath(),
        data: vehicle,
        location: null,
        marker: null,
        markers: []
      };
      if (vehicle.LastLocation && !isNaN(vehicle.LastLocation.Lat) && !isNaN(vehicle.LastLocation.Lng)) {
        return setLocation(_vehicles[vehicle._id], vehicle.LastLocation);
      }
    };

    MojioMap.prototype.subscribe = function(vehicleId, groups) {
      var ids, k, test, _i, _len;
      if (!groups) {
        groups = Mojio.EventTypes;
      }
      if (vehicleId) {
        return client.subscribe("Vehicle", vehicleId, groups).fail(function() {
          return $.error("Failed to subscribe");
        });
      } else {
        ids = [];
        for (_i = 0, _len = _vehicles.length; _i < _len; _i++) {
          k = _vehicles[_i];
          ids[ids.length] = k;
        }
        return test = this.client.subscribe('Vehicle', ids, groups);
      }
    };

    MojioMap.prototype.addVehicleById = function(vehicleId) {
      return this.client.get('vehicles', vehicleId).done(addVehicle);
    };

    MojioMap.prototype.center = function() {
      var bounds, k, _i, _len;
      bounds = new google.maps.LatLngBounds();
      for (_i = 0, _len = _vehicles.length; _i < _len; _i++) {
        k = _vehicles[_i];
        if (_vehicles[k].location) {
          bounds.extend(_vehicles[k].location);
        }
      }
      return this.map.fitBounds(bounds);
    };

    return MojioMap;

  })();

}).call(this);

/*
//@ sourceMappingURL=mojio.map-1.1.0.map
*/
