// Generated by CoffeeScript 1.6.3
(function() {
  var Combyne, fs;

  fs = require('fs');

  Combyne = require('combyne');

  fs.readFile('./models/schema.coffee', function(err, data) {
    var result;
    if (err) {
      throw err;
    }
    result = JSON.parse(data);
    return fs.readFile('./models/ModelTemplate.mustache', function(err, data) {
      var model_template;
      model_template = Combyne(data.toString());
      return fs.readFile('../test/TestTemplate.mustache', function(err, data) {
        var event_model, event_schema, field, i, model, models, output, s, schema, spl, str, test_template, type, view, wstream, _i, _len;
        test_template = Combyne(data.toString());
        models = [];
        i = 0;
        for (model in result) {
          schema = result[model];
          if (model !== "App" && model !== "Address" && model !== "Location" && model !== "Trip" && model !== "User" && model !== "Vehicle" && model !== "Event" && model !== "Mojio" && model !== "Observer" && model !== "Subscription" && model !== "Product") {
            continue;
          }
          view = {
            Model: model,
            model: model.toLowerCase(),
            schema: ""
          };
          console.log("Processing " + model);
          if (model === "Event") {
            for (event_model in result) {
              event_schema = result[event_model];
              if (event_model.indexOf("Event") !== -1) {
                for (field in event_schema) {
                  type = event_schema[field];
                  schema[field] = type;
                }
              }
            }
          }
          str = JSON.stringify(schema, null, 4);
          spl = str.split('\n');
          for (_i = 0, _len = spl.length; _i < _len; _i++) {
            s = spl[_i];
            view['schema'] += '            ' + s + '\n';
          }
          output = model_template.render(view);
          wstream = fs.createWriteStream("./models/" + model + ".coffee");
          wstream.write(output);
          wstream.end();
          if (model === "Address" || model === "Location" || model === "Observer") {
            continue;
          }
          output = test_template.render(view);
          wstream = fs.createWriteStream("../test/" + model + "_test.coffee");
          wstream.write(output);
          wstream.end();
          models[i++] = view;
        }
        return fs.readFile('./MojioClientTemplate.mustache', function(err, data) {
          var client_template;
          client_template = Combyne(data.toString());
          view['models'] = models;
          view['http_require'] = "Http = require './HttpNodeWrapper'";
          view['http_request'] = "http = new Http()";
          output = client_template.render(view);
          wstream = fs.createWriteStream("./nodejs/MojioClient.coffee");
          wstream.write(output);
          wstream.end();
          view['http_require'] = "Http = require './HttpBrowserWrapper'";
          view['http_request'] = "http = new Http($)";
          output = client_template.render(view);
          wstream = fs.createWriteStream("./browser/MojioClient.coffee");
          wstream.write(output);
          return wstream.end();
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=generate.map
*/
